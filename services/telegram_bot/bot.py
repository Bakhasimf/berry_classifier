import asyncio
import logging
import os
import yaml
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from handlers import router
import logging.config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
config_path = os.path.join(os.path.dirname(__file__), "..", "..", "logging_config.yaml")
with open(config_path, 'r') as f:
    config = yaml.safe_load(f)
logging.config.dictConfig(config)

logger = logging.getLogger("bot")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '8098658423:AAE8jPQr2DVdtUL_PB5Ez0UmtbIGyQlCnEc'


async def main():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")

        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

        dp = Dispatcher()
        dp.include_router(router)
        logger.info("–†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")

if __name__ == "__main__":
    asyncio.run(main())


# import asyncio
# import logging
# from aiogram import Bot, Dispatcher
# from aiogram.enums import ParseMode
# from aiogram.client.default import DefaultBotProperties
# from handlers import router
# import logging.config
# import yaml
# import os
#
# # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# config_path = os.path.join(os.path.dirname(__file__), "..", "..", "logging_config.yaml")
# with open(config_path, 'r') as f:
#     config = yaml.safe_load(f)
# logging.config.dictConfig(config)
#
#
# BOT_TOKEN = '8098658423:AAE8jPQr2DVdtUL_PB5Ez0UmtbIGyQlCnEc'
#
# async def main():
#     logging.basicConfig(level=logging.INFO)
#
#     bot = Bot(
#         token=BOT_TOKEN,
#         default=DefaultBotProperties(parse_mode=ParseMode.HTML)
#     )
#
#     dp = Dispatcher()
#     dp.include_router(router)  # üëà –ø–æ–¥–∫–ª—é—á–∞–µ–º router –∏–∑ handlers.py
#
#     await dp.start_polling(bot)
#
# if __name__ == "__main__":
#     asyncio.run(main())
